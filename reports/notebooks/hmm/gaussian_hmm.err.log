Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
num_train_batches = 3
num_test_batches = 1
num_timesteps = 100

# Make an HMM and sample data and true underlying states
true_num_states = 5
emission_dim = 2
hmm = GaussianHMM(true_num_states, emission_dim)

# Specify parameters of the HMM
initial_probs = jnp.ones(true_num_states) / true_num_states
transition_matrix = 0.80 * jnp.eye(true_num_states) \
    + 0.15 * jnp.roll(jnp.eye(true_num_states), 1, axis=1) \
    + 0.05 / true_num_states
emission_means = jnp.column_stack([
    jnp.cos(jnp.linspace(0, 2 * jnp.pi, true_num_states + 1))[:-1],
    jnp.sin(jnp.linspace(0, 2 * jnp.pi, true_num_states + 1))[:-1],
    jnp.zeros((true_num_states, emission_dim - 2)),
    ])
emission_covs = jnp.tile(0.1**2 * jnp.eye(emission_dim), (true_num_states, 1, 1))
        
true_params, _ = hmm.initialize(initial_probs=initial_probs,
                                transition_matrix=transition_matrix,
                                emission_means=emission_means,
                                emission_covariances=emission_covs)

# Sample train, validation, and test data
train_key, val_key, test_key = jr.split(jr.PRNGKey(0), 3)
f = vmap(partial(hmm.sample, true_params, num_timesteps=num_timesteps))
train_true_states, train_emissions = f(jr.split(train_key, num_train_batches))
test_true_states,  test_emissions  = f(jr.split(test_key, num_test_batches))

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[4], line 22[0m
[1;32m     15[0m emission_means [38;5;241m=[39m jnp[38;5;241m.[39mcolumn_stack([
[1;32m     16[0m     jnp[38;5;241m.[39mcos(jnp[38;5;241m.[39mlinspace([38;5;241m0[39m, [38;5;241m2[39m [38;5;241m*[39m jnp[38;5;241m.[39mpi, true_num_states [38;5;241m+[39m [38;5;241m1[39m))[:[38;5;241m-[39m[38;5;241m1[39m],
[1;32m     17[0m     jnp[38;5;241m.[39msin(jnp[38;5;241m.[39mlinspace([38;5;241m0[39m, [38;5;241m2[39m [38;5;241m*[39m jnp[38;5;241m.[39mpi, true_num_states [38;5;241m+[39m [38;5;241m1[39m))[:[38;5;241m-[39m[38;5;241m1[39m],
[1;32m     18[0m     jnp[38;5;241m.[39mzeros((true_num_states, emission_dim [38;5;241m-[39m [38;5;241m2[39m)),
[1;32m     19[0m     ])
[1;32m     20[0m emission_covs [38;5;241m=[39m jnp[38;5;241m.[39mtile([38;5;241m0.1[39m[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m [38;5;241m*[39m jnp[38;5;241m.[39meye(emission_dim), (true_num_states, [38;5;241m1[39m, [38;5;241m1[39m))
[0;32m---> 22[0m true_params, _ [38;5;241m=[39m [43mhmm[49m[38;5;241;43m.[39;49m[43minitialize[49m[43m([49m[43minitial_probs[49m[38;5;241;43m=[39;49m[43minitial_probs[49m[43m,[49m
[1;32m     23[0m [43m                                [49m[43mtransition_matrix[49m[38;5;241;43m=[39;49m[43mtransition_matrix[49m[43m,[49m
[1;32m     24[0m [43m                                [49m[43memission_means[49m[38;5;241;43m=[39;49m[43memission_means[49m[43m,[49m
[1;32m     25[0m [43m                                [49m[43memission_covariances[49m[38;5;241;43m=[39;49m[43memission_covs[49m[43m)[49m
[1;32m     27[0m [38;5;66;03m# Sample train, validation, and test data[39;00m
[1;32m     28[0m train_key, val_key, test_key [38;5;241m=[39m jr[38;5;241m.[39msplit(jr[38;5;241m.[39mPRNGKey([38;5;241m0[39m), [38;5;241m3[39m)

File [0;32m~/work/dynamax/dynamax/dynamax/hidden_markov_model/models/gaussian_hmm.py:651[0m, in [0;36mGaussianHMM.initialize[0;34m(self, key, method, initial_probs, transition_matrix, emission_means, emission_covariances, emissions)[0m
[1;32m    649[0m params[[38;5;124m"[39m[38;5;124minitial[39m[38;5;124m"[39m], props[[38;5;124m"[39m[38;5;124minitial[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39minitial_component[38;5;241m.[39minitialize(key1, method[38;5;241m=[39mmethod, initial_probs[38;5;241m=[39minitial_probs)
[1;32m    650[0m params[[38;5;124m"[39m[38;5;124mtransitions[39m[38;5;124m"[39m], props[[38;5;124m"[39m[38;5;124mtransitions[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mtransition_component[38;5;241m.[39minitialize(key2, method[38;5;241m=[39mmethod, transition_matrix[38;5;241m=[39mtransition_matrix)
[0;32m--> 651[0m params[[38;5;124m"[39m[38;5;124memissions[39m[38;5;124m"[39m], props[[38;5;124m"[39m[38;5;124memissions[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43memission_component[49m[38;5;241;43m.[39;49m[43minitialize[49m[43m([49m[43mkey3[49m[43m,[49m[43m [49m[43mmethod[49m[38;5;241;43m=[39;49m[43mmethod[49m[43m,[49m[43m [49m[43memission_means[49m[38;5;241;43m=[39;49m[43memission_means[49m[43m,[49m[43m [49m[43memission_covariances[49m[38;5;241;43m=[39;49m[43memission_covariances[49m[43m,[49m[43m [49m[43memissions[49m[38;5;241;43m=[39;49m[43memissions[49m[43m)[49m
[1;32m    652[0m [38;5;28;01mreturn[39;00m ParamsGaussianHMM([38;5;241m*[39m[38;5;241m*[39mparams), ParamsGaussianHMM([38;5;241m*[39m[38;5;241m*[39mprops)

File [0;32m~/work/dynamax/dynamax/dynamax/hidden_markov_model/models/gaussian_hmm.py:83[0m, in [0;36mGaussianHMMEmissions.initialize[0;34m(self, key, method, emission_means, emission_covariances, emissions)[0m
[1;32m     81[0m [38;5;28;01melif[39;00m method[38;5;241m.[39mlower() [38;5;241m==[39m [38;5;124m"[39m[38;5;124mprior[39m[38;5;124m"[39m:
[1;32m     82[0m     this_key, key [38;5;241m=[39m jr[38;5;241m.[39msplit(key)
[0;32m---> 83[0m     prior [38;5;241m=[39m [43mNormalInverseWishart[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43memission_prior_mean[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43memission_prior_conc[49m[43m,[49m
[1;32m     84[0m [43m                                 [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43memission_prior_df[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43memission_prior_scale[49m[43m)[49m
[1;32m     85[0m     (_emission_covs, _emission_means) [38;5;241m=[39m prior[38;5;241m.[39msample(seed[38;5;241m=[39mthis_key, sample_shape[38;5;241m=[39m([38;5;28mself[39m[38;5;241m.[39mnum_states,))
[1;32m     87[0m [38;5;28;01melse[39;00m:

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/decorator.py:232[0m, in [0;36mdecorate.<locals>.fun[0;34m(*args, **kw)[0m
[1;32m    230[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m kwsyntax:
[1;32m    231[0m     args, kw [38;5;241m=[39m fix(args, kw, sig)
[0;32m--> 232[0m [38;5;28;01mreturn[39;00m [43mcaller[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43m([49m[43mextras[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/distributions/distribution.py:342[0m, in [0;36m_DistributionMeta.__new__.<locals>.wrapped_init[0;34m(***failed resolving arguments***)[0m
[1;32m    339[0m [38;5;66;03m# Note: if we ever want to have things set in `self` before `__init__` is[39;00m
[1;32m    340[0m [38;5;66;03m# called, here is the place to do it.[39;00m
[1;32m    341[0m self_[38;5;241m.[39m_parameters [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m--> 342[0m [43mdefault_init[49m[43m([49m[43mself_[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    343[0m [38;5;66;03m# Note: if we ever want to override things set in `self` by subclass[39;00m
[1;32m    344[0m [38;5;66;03m# `__init__`, here is the place to do it.[39;00m
[1;32m    345[0m [38;5;28;01mif[39;00m self_[38;5;241m.[39m_parameters [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    346[0m   [38;5;66;03m# We prefer subclasses will set `parameters = dict(locals())` because[39;00m
[1;32m    347[0m   [38;5;66;03m# this has nearly zero overhead. However, failing to do this, we will[39;00m
[1;32m    348[0m   [38;5;66;03m# resolve the input arguments dynamically and only when needed.[39;00m

File [0;32m~/work/dynamax/dynamax/dynamax/utils/distributions.py:133[0m, in [0;36mNormalInverseWishart.__init__[0;34m(self, loc, mean_concentration, df, scale)[0m
[1;32m    129[0m [38;5;28mself[39m[38;5;241m.[39m_df [38;5;241m=[39m df
[1;32m    130[0m [38;5;28mself[39m[38;5;241m.[39m_scale [38;5;241m=[39m scale
[1;32m    132[0m [38;5;28msuper[39m(NormalInverseWishart, [38;5;28mself[39m)[38;5;241m.[39m[38;5;21m__init__[39m([
[0;32m--> 133[0m     [43mInverseWishart[49m[43m([49m[43mdf[49m[43m,[49m[43m [49m[43mscale[49m[43m)[49m,
[1;32m    134[0m     [38;5;28;01mlambda[39;00m Sigma: tfd[38;5;241m.[39mMultivariateNormalFullCovariance(loc, Sigma [38;5;241m/[39m mean_concentration)
[1;32m    135[0m ])
[1;32m    137[0m [38;5;28mself[39m[38;5;241m.[39m_parameters [38;5;241m=[39m [38;5;28mdict[39m(loc[38;5;241m=[39mloc, mean_concentration[38;5;241m=[39mmean_concentration, df[38;5;241m=[39mdf, scale[38;5;241m=[39mscale)

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/decorator.py:232[0m, in [0;36mdecorate.<locals>.fun[0;34m(*args, **kw)[0m
[1;32m    230[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m kwsyntax:
[1;32m    231[0m     args, kw [38;5;241m=[39m fix(args, kw, sig)
[0;32m--> 232[0m [38;5;28;01mreturn[39;00m [43mcaller[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43m([49m[43mextras[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/distributions/distribution.py:342[0m, in [0;36m_DistributionMeta.__new__.<locals>.wrapped_init[0;34m(***failed resolving arguments***)[0m
[1;32m    339[0m [38;5;66;03m# Note: if we ever want to have things set in `self` before `__init__` is[39;00m
[1;32m    340[0m [38;5;66;03m# called, here is the place to do it.[39;00m
[1;32m    341[0m self_[38;5;241m.[39m_parameters [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m--> 342[0m [43mdefault_init[49m[43m([49m[43mself_[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    343[0m [38;5;66;03m# Note: if we ever want to override things set in `self` by subclass[39;00m
[1;32m    344[0m [38;5;66;03m# `__init__`, here is the place to do it.[39;00m
[1;32m    345[0m [38;5;28;01mif[39;00m self_[38;5;241m.[39m_parameters [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    346[0m   [38;5;66;03m# We prefer subclasses will set `parameters = dict(locals())` because[39;00m
[1;32m    347[0m   [38;5;66;03m# this has nearly zero overhead. However, failing to do this, we will[39;00m
[1;32m    348[0m   [38;5;66;03m# resolve the input arguments dynamically and only when needed.[39;00m

File [0;32m~/work/dynamax/dynamax/dynamax/utils/distributions.py:51[0m, in [0;36mInverseWishart.__init__[0;34m(self, df, scale)[0m
[1;32m     48[0m cho_scale [38;5;241m=[39m jnp[38;5;241m.[39mlinalg[38;5;241m.[39mcholesky(scale)
[1;32m     49[0m inv_scale_tril [38;5;241m=[39m solve_triangular(cho_scale, eye, lower[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m---> 51[0m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m
[1;32m     52[0m [43m    [49m[43mtfd[49m[38;5;241;43m.[39;49m[43mWishartTriL[49m[43m([49m[43mdf[49m[43m,[49m[43m [49m[43mscale_tril[49m[38;5;241;43m=[39;49m[43minv_scale_tril[49m[43m)[49m[43m,[49m
[1;32m     53[0m [43m    [49m[43mtfb[49m[38;5;241;43m.[39;49m[43mChain[49m[43m([49m[43m[[49m[43mtfb[49m[38;5;241;43m.[39;49m[43mCholeskyOuterProduct[49m[43m([49m[43m)[49m[43m,[49m
[1;32m     54[0m [43m               [49m[43mtfb[49m[38;5;241;43m.[39;49m[43mCholeskyToInvCholesky[49m[43m([49m[43m)[49m[43m,[49m
[1;32m     55[0m [43m               [49m[43mtfb[49m[38;5;241;43m.[39;49m[43mInvert[49m[43m([49m[43mtfb[49m[38;5;241;43m.[39;49m[43mCholeskyOuterProduct[49m[43m([49m[43m)[49m[43m)[49m[43m][49m[43m)[49m[43m)[49m
[1;32m     57[0m [38;5;28mself[39m[38;5;241m.[39m_parameters [38;5;241m=[39m [38;5;28mdict[39m(df[38;5;241m=[39mdf, scale[38;5;241m=[39mscale)

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/decorator.py:232[0m, in [0;36mdecorate.<locals>.fun[0;34m(*args, **kw)[0m
[1;32m    230[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m kwsyntax:
[1;32m    231[0m     args, kw [38;5;241m=[39m fix(args, kw, sig)
[0;32m--> 232[0m [38;5;28;01mreturn[39;00m [43mcaller[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43m([49m[43mextras[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43margs[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkw[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/distributions/distribution.py:342[0m, in [0;36m_DistributionMeta.__new__.<locals>.wrapped_init[0;34m(***failed resolving arguments***)[0m
[1;32m    339[0m [38;5;66;03m# Note: if we ever want to have things set in `self` before `__init__` is[39;00m
[1;32m    340[0m [38;5;66;03m# called, here is the place to do it.[39;00m
[1;32m    341[0m self_[38;5;241m.[39m_parameters [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m--> 342[0m [43mdefault_init[49m[43m([49m[43mself_[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    343[0m [38;5;66;03m# Note: if we ever want to override things set in `self` by subclass[39;00m
[1;32m    344[0m [38;5;66;03m# `__init__`, here is the place to do it.[39;00m
[1;32m    345[0m [38;5;28;01mif[39;00m self_[38;5;241m.[39m_parameters [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    346[0m   [38;5;66;03m# We prefer subclasses will set `parameters = dict(locals())` because[39;00m
[1;32m    347[0m   [38;5;66;03m# this has nearly zero overhead. However, failing to do this, we will[39;00m
[1;32m    348[0m   [38;5;66;03m# resolve the input arguments dynamically and only when needed.[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/distributions/transformed_distribution.py:244[0m, in [0;36m_TransformedDistribution.__init__[0;34m(self, distribution, bijector, kwargs_split_fn, validate_args, parameters, name)[0m
[1;32m    238[0m [38;5;28mself[39m[38;5;241m.[39m_zero [38;5;241m=[39m tf[38;5;241m.[39mconstant([38;5;241m0[39m, dtype[38;5;241m=[39mtf[38;5;241m.[39mint32, name[38;5;241m=[39m[38;5;124m'[39m[38;5;124mzero[39m[38;5;124m'[39m)
[1;32m    240[0m [38;5;66;03m# We don't just want to check isinstance(JointDistribution) because[39;00m
[1;32m    241[0m [38;5;66;03m# TransformedDistributions with multipart bijectors are effectively[39;00m
[1;32m    242[0m [38;5;66;03m# joint but don't inherit from JD. The 'duck-type' test is that[39;00m
[1;32m    243[0m [38;5;66;03m# JDs have a structured dtype.[39;00m
[0;32m--> 244[0m dtype [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mbijector[49m[38;5;241;43m.[39;49m[43mforward_dtype[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdistribution[49m[38;5;241;43m.[39;49m[43mdtype[49m[43m)[49m
[1;32m    245[0m [38;5;28mself[39m[38;5;241m.[39m_is_joint [38;5;241m=[39m tf[38;5;241m.[39mnest[38;5;241m.[39mis_nested(dtype)
[1;32m    247[0m [38;5;28msuper[39m(_TransformedDistribution, [38;5;28mself[39m)[38;5;241m.[39m[38;5;21m__init__[39m(
[1;32m    248[0m     dtype[38;5;241m=[39mdtype,
[1;32m    249[0m     reparameterization_type[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_distribution[38;5;241m.[39mreparameterization_type,
[0;32m   (...)[0m
[1;32m    252[0m     parameters[38;5;241m=[39mparameters,
[1;32m    253[0m     name[38;5;241m=[39mname)

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/bijectors/bijector.py:1705[0m, in [0;36mBijector.forward_dtype[0;34m(self, dtype, name, **kwargs)[0m
[1;32m   1701[0m   input_dtype [38;5;241m=[39m nest_util[38;5;241m.[39mbroadcast_structure(
[1;32m   1702[0m       [38;5;28mself[39m[38;5;241m.[39mforward_min_event_ndims, [38;5;28mself[39m[38;5;241m.[39mdtype)
[1;32m   1703[0m [38;5;28;01melse[39;00m:
[1;32m   1704[0m   [38;5;66;03m# Make sure inputs are compatible with statically-known dtype.[39;00m
[0;32m-> 1705[0m   input_dtype [38;5;241m=[39m [43mnest[49m[38;5;241;43m.[39;49m[43mmap_structure_up_to[49m[43m([49m
[1;32m   1706[0m [43m      [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mforward_min_event_ndims[49m[43m,[49m
[1;32m   1707[0m [43m      [49m[38;5;28;43;01mlambda[39;49;00m[43m [49m[43mx[49m[43m:[49m[43m [49m[43mdtype_util[49m[38;5;241;43m.[39;49m[43mconvert_to_dtype[49m[43m([49m[43mx[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdtype[49m[43m)[49m[43m,[49m
[1;32m   1708[0m [43m      [49m[43mnest_util[49m[38;5;241;43m.[39;49m[43mcoerce_structure[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mforward_min_event_ndims[49m[43m,[49m[43m [49m[43mdtype[49m[43m)[49m[43m,[49m
[1;32m   1709[0m [43m      [49m[43mcheck_types[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[1;32m   1711[0m output_dtype [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_forward_dtype(input_dtype, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m   1712[0m [38;5;28;01mtry[39;00m:
[1;32m   1713[0m   [38;5;66;03m# kwargs may alter dtypes themselves, but we currently require[39;00m
[1;32m   1714[0m   [38;5;66;03m# structure to be statically known.[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/python/internal/backend/jax/nest.py:324[0m, in [0;36mmap_structure_up_to[0;34m(shallow_structure, func, *structures, **kwargs)[0m
[1;32m    323[0m [38;5;28;01mdef[39;00m [38;5;21mmap_structure_up_to[39m(shallow_structure, func, [38;5;241m*[39mstructures, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m--> 324[0m   [38;5;28;01mreturn[39;00m [43mmap_structure_with_tuple_paths_up_to[49m[43m([49m
[1;32m    325[0m [43m      [49m[43mshallow_structure[49m[43m,[49m
[1;32m    326[0m [43m      [49m[38;5;28;43;01mlambda[39;49;00m[43m [49m[43m_[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m:[49m[43m [49m[43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m)[49m[43m,[49m[43m  [49m[38;5;66;43;03m# Discards path.[39;49;00m
[1;32m    327[0m [43m      [49m[38;5;241;43m*[39;49m[43mstructures[49m[43m,[49m
[1;32m    328[0m [43m      [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/python/internal/backend/jax/nest.py:353[0m, in [0;36mmap_structure_with_tuple_paths_up_to[0;34m(shallow_structure, func, expand_composites, *structures, **kwargs)[0m
[1;32m    350[0m [38;5;28;01mfor[39;00m input_tree [38;5;129;01min[39;00m structures:
[1;32m    351[0m   assert_shallow_structure(
[1;32m    352[0m       shallow_structure, input_tree, check_types[38;5;241m=[39mcheck_types)
[0;32m--> 353[0m [38;5;28;01mreturn[39;00m [43mdm_tree[49m[38;5;241;43m.[39;49m[43mmap_structure_with_path_up_to[49m[43m([49m
[1;32m    354[0m [43m    [49m[43mshallow_structure[49m[43m,[49m[43m [49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43mstructures[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tree/__init__.py:778[0m, in [0;36mmap_structure_with_path_up_to[0;34m(***failed resolving arguments***)[0m
[1;32m    776[0m results [38;5;241m=[39m []
[1;32m    777[0m [38;5;28;01mfor[39;00m path_and_values [38;5;129;01min[39;00m _multiyield_flat_up_to(shallow_structure, [38;5;241m*[39mstructures):
[0;32m--> 778[0m   results[38;5;241m.[39mappend([43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43mpath_and_values[49m[43m)[49m)
[1;32m    779[0m [38;5;28;01mreturn[39;00m unflatten_as(shallow_structure, results)

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/python/internal/backend/jax/nest.py:326[0m, in [0;36mmap_structure_up_to.<locals>.<lambda>[0;34m(_, *args)[0m
[1;32m    323[0m [38;5;28;01mdef[39;00m [38;5;21mmap_structure_up_to[39m(shallow_structure, func, [38;5;241m*[39mstructures, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m    324[0m   [38;5;28;01mreturn[39;00m map_structure_with_tuple_paths_up_to(
[1;32m    325[0m       shallow_structure,
[0;32m--> 326[0m       [38;5;28;01mlambda[39;00m _, [38;5;241m*[39margs: [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m)[49m,  [38;5;66;03m# Discards path.[39;00m
[1;32m    327[0m       [38;5;241m*[39mstructures,
[1;32m    328[0m       [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/bijectors/bijector.py:1707[0m, in [0;36mBijector.forward_dtype.<locals>.<lambda>[0;34m(x)[0m
[1;32m   1701[0m   input_dtype [38;5;241m=[39m nest_util[38;5;241m.[39mbroadcast_structure(
[1;32m   1702[0m       [38;5;28mself[39m[38;5;241m.[39mforward_min_event_ndims, [38;5;28mself[39m[38;5;241m.[39mdtype)
[1;32m   1703[0m [38;5;28;01melse[39;00m:
[1;32m   1704[0m   [38;5;66;03m# Make sure inputs are compatible with statically-known dtype.[39;00m
[1;32m   1705[0m   input_dtype [38;5;241m=[39m nest[38;5;241m.[39mmap_structure_up_to(
[1;32m   1706[0m       [38;5;28mself[39m[38;5;241m.[39mforward_min_event_ndims,
[0;32m-> 1707[0m       [38;5;28;01mlambda[39;00m x: [43mdtype_util[49m[38;5;241;43m.[39;49m[43mconvert_to_dtype[49m[43m([49m[43mx[49m[43m,[49m[43m [49m[43mdtype[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdtype[49m[43m)[49m,
[1;32m   1708[0m       nest_util[38;5;241m.[39mcoerce_structure([38;5;28mself[39m[38;5;241m.[39mforward_min_event_ndims, dtype),
[1;32m   1709[0m       check_types[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[1;32m   1711[0m output_dtype [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_forward_dtype(input_dtype, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m   1712[0m [38;5;28;01mtry[39;00m:
[1;32m   1713[0m   [38;5;66;03m# kwargs may alter dtypes themselves, but we currently require[39;00m
[1;32m   1714[0m   [38;5;66;03m# structure to be statically known.[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/tensorflow_probability/substrates/jax/internal/dtype_util.py:247[0m, in [0;36mconvert_to_dtype[0;34m(tensor_or_dtype, dtype, dtype_hint)[0m
[1;32m    245[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(tensor_or_dtype, np[38;5;241m.[39mndarray):
[1;32m    246[0m   dt [38;5;241m=[39m base_dtype(dtype [38;5;129;01mor[39;00m dtype_hint [38;5;129;01mor[39;00m tensor_or_dtype[38;5;241m.[39mdtype)
[0;32m--> 247[0m [38;5;28;01melif[39;00m [43mnp[49m[38;5;241;43m.[39;49m[43missctype[49m(tensor_or_dtype):
[1;32m    248[0m   dt [38;5;241m=[39m base_dtype(dtype [38;5;129;01mor[39;00m dtype_hint [38;5;129;01mor[39;00m tensor_or_dtype)
[1;32m    249[0m [38;5;28;01melse[39;00m:
[1;32m    250[0m   [38;5;66;03m# If this is a Python object, call `convert_to_tensor` and grab the dtype.[39;00m
[1;32m    251[0m   [38;5;66;03m# Note that this will add ops in graph-mode; we may want to consider[39;00m
[1;32m    252[0m   [38;5;66;03m# other ways to handle this case.[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.19/x64/lib/python3.9/site-packages/numpy/__init__.py:397[0m, in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    394[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(__former_attrs__[attr])
[1;32m    396[0m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __expired_attributes__:
[0;32m--> 397[0m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[1;32m    398[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124m`np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[38;5;124m` was removed in the NumPy 2.0 release. [39m[38;5;124m"[39m
[1;32m    399[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m__expired_attributes__[attr][38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m    400[0m     )
[1;32m    402[0m [38;5;28;01mif[39;00m attr [38;5;241m==[39m [38;5;124m"[39m[38;5;124mchararray[39m[38;5;124m"[39m:
[1;32m    403[0m     warnings[38;5;241m.[39mwarn(
[1;32m    404[0m         [38;5;124m"[39m[38;5;124m`np.chararray` is deprecated and will be removed from [39m[38;5;124m"[39m
[1;32m    405[0m         [38;5;124m"[39m[38;5;124mthe main namespace in the future. Use an array with a string [39m[38;5;124m"[39m
[1;32m    406[0m         [38;5;124m"[39m[38;5;124mor bytes dtype instead.[39m[38;5;124m"[39m, [38;5;167;01mDeprecationWarning[39;00m, stacklevel[38;5;241m=[39m[38;5;241m2[39m)

[0;31mAttributeError[0m: `np.issctype` was removed in the NumPy 2.0 release. Use `issubclass(rep, np.generic)` instead.

